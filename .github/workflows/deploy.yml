name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      http-backend-changed: ${{ steps.changes.outputs.http-backend }}
      ws-backend-changed: ${{ steps.changes.outputs.ws-backend }}
      web-changed: ${{ steps.changes.outputs.web }}
      packages-changed: ${{ steps.changes.outputs.packages }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            http-backend:
              - 'apps/http-backend/**'
              - 'docker/Dockerfile.backend'
            ws-backend:
              - 'apps/ws-backend/**'
              - 'docker/Dockerfile.ws'
            web:
              - 'apps/web/**'
              - 'docker/Dockerfile.frontend'
            packages:
              - 'packages/**'
              - 'package.json'
              - 'bun.lock'
              - 'turbo.json'

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push HTTP Backend
        if: steps.changes.outputs.http-backend == 'true' || steps.changes.outputs.packages == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-http-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-http-backend:${{ github.sha }}

      - name: Build and push WebSocket Backend
        if: steps.changes.outputs.ws-backend == 'true' || steps.changes.outputs.packages == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.ws
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-ws-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-ws-backend:${{ github.sha }}

      - name: Build and push Web Frontend
        if: steps.changes.outputs.web == 'true' || steps.changes.outputs.packages == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-web:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-web:${{ github.sha }}

      - name: Show build summary
        run: |
          echo "🔍 Build Summary:"
          echo "HTTP Backend changed: ${{ steps.changes.outputs.http-backend }}"
          echo "WebSocket Backend changed: ${{ steps.changes.outputs.ws-backend }}"
          echo "Web Frontend changed: ${{ steps.changes.outputs.web }}"
          echo "Packages changed: ${{ steps.changes.outputs.packages }}"

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.build-and-push.outputs.http-backend-changed == 'true' || needs.build-and-push.outputs.ws-backend-changed == 'true' || needs.build-and-push.outputs.web-changed == 'true' || needs.build-and-push.outputs.packages-changed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ec2-13-126-228-85.ap-south-1.compute.amazonaws.com
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Show deployment summary
            echo "🚀 Deployment Summary:"
            echo "HTTP Backend changed: ${{ needs.build-and-push.outputs.http-backend-changed }}"
            echo "WebSocket Backend changed: ${{ needs.build-and-push.outputs.ws-backend-changed }}"
            echo "Web Frontend changed: ${{ needs.build-and-push.outputs.web-changed }}"
            echo "Packages changed: ${{ needs.build-and-push.outputs.packages-changed }}"
            echo ""
            
            # Update system
            sudo apt-get update
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get install -y ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi
            
            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Create project directory
            mkdir -p ~/turborepo-app
            cd ~/turborepo-app
            
            # Create docker-compose.prod.yml for production deployment
            cat > docker-compose.prod.yml << 'EOF'
            version: '3.8'
            
            services:
              database:
                image: postgres:15-alpine
                container_name: turborepo-postgres
                restart: unless-stopped
                environment:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: postgres123
                  POSTGRES_DB: turborepo
                  PGDATA: /var/lib/postgresql/data/pgdata
                ports:
                  - "5432:5432"
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                networks:
                  - turborepo-network
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U postgres -d turborepo"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
            
              http-backend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-http-backend:latest
                container_name: turborepo-http-backend
                restart: unless-stopped
                environment:
                  DATABASE_URL: postgresql://postgres:postgres123@database:5432/turborepo
                  PORT: 3001
                ports:
                  - "3001:3001"
                depends_on:
                  database:
                    condition: service_healthy
                networks:
                  - turborepo-network
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
            
              ws-backend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-ws-backend:latest
                container_name: turborepo-ws-backend
                restart: unless-stopped
                environment:
                  DATABASE_URL: postgresql://postgres:postgres123@database:5432/turborepo
                  PORT: 3002
                ports:
                  - "3002:3002"
                depends_on:
                  database:
                    condition: service_healthy
                networks:
                  - turborepo-network
                healthcheck:
                  test: ["CMD", "nc", "-z", "localhost", "3002"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
            
              web:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-web:latest
                container_name: turborepo-web
                restart: unless-stopped
                environment:
                  NEXT_PUBLIC_HTTP_BACKEND_URL: http://ec2-13-126-228-85.ap-south-1.compute.amazonaws.com:3001
                  NEXT_PUBLIC_WS_BACKEND_URL: ws://ec2-13-126-228-85.ap-south-1.compute.amazonaws.com:3002
                  DATABASE_URL: postgresql://postgres:postgres123@database:5432/turborepo
                ports:
                  - "3000:3000"
                depends_on:
                  http-backend:
                    condition: service_healthy
                  ws-backend:
                    condition: service_healthy
                networks:
                  - turborepo-network
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
            
            volumes:
              postgres_data:
            
            networks:
              turborepo-network:
                driver: bridge
            EOF
            
            # Check disk space and cleanup if needed
            echo "🔍 Checking disk space..."
            df -h
            
            # Cleanup Docker resources to free up space
            echo "🧹 Cleaning up Docker resources..."
            docker system prune -a -f || true
            docker volume prune -f || true
            docker network prune -f || true
            
            # Clean up system cache
            echo "🧹 Cleaning up system cache..."
            rm -rf ~/.cache/* || true
            sudo apt-get clean || true
            sudo apt-get autoclean || true
            sudo apt-get autoremove -y || true
            
            # Check space after cleanup
            echo "💾 Available space after cleanup:"
            df -h
            
            # Login to Docker Hub
            echo "🔐 Logging into Docker Hub..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Stop existing containers
            echo "⏹️ Stopping existing containers..."
            docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
            
            # Remove old images to free up more space
            echo "🗑️ Removing old images..."
            docker images | grep "${{ secrets.DOCKERHUB_USERNAME }}/turborepo" | awk '{print $3}' | xargs -r docker rmi -f || true
            
            # Pull latest images one by one with space check
            echo "📥 Pulling latest images..."
            
            # Pull HTTP Backend if it was built
            if [ "${{ needs.build-and-push.outputs.http-backend-changed }}" == "true" ] || [ "${{ needs.build-and-push.outputs.packages-changed }}" == "true" ]; then
              echo "Pulling HTTP Backend..."
              docker pull ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-http-backend:latest
              df -h | head -2
            else
              echo "⏭️ Skipping HTTP Backend pull (no changes)"
            fi
            
            # Pull WebSocket Backend if it was built
            if [ "${{ needs.build-and-push.outputs.ws-backend-changed }}" == "true" ] || [ "${{ needs.build-and-push.outputs.packages-changed }}" == "true" ]; then
              echo "Pulling WebSocket Backend..."
              docker pull ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-ws-backend:latest
              df -h | head -2
            else
              echo "⏭️ Skipping WebSocket Backend pull (no changes)"
            fi
            
            # Pull Web Frontend if it was built
            if [ "${{ needs.build-and-push.outputs.web-changed }}" == "true" ] || [ "${{ needs.build-and-push.outputs.packages-changed }}" == "true" ]; then
              echo "Pulling Web Frontend..."
              docker pull ${{ secrets.DOCKERHUB_USERNAME }}/turborepo-web:latest
              df -h | head -2
            else
              echo "⏭️ Skipping Web Frontend pull (no changes)"
            fi
            
            # Start the application
            echo "🚀 Starting the application..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be healthy
            echo "⏳ Waiting for services to start..."
            sleep 30
            
            # Check container status
            echo "📊 Container status:"
            docker-compose -f docker-compose.prod.yml ps
            
            # Check final disk usage
            echo "💾 Final disk usage:"
            df -h
            
            # Show application URLs
            echo ""
            echo "✅ Deployment completed successfully!"
            echo "🌐 Web Application: http://ec2-13-126-228-85.ap-south-1.compute.amazonaws.com:3000"
            echo "🔗 HTTP API: http://ec2-13-126-228-85.ap-south-1.compute.amazonaws.com:3001"
            echo "⚡ WebSocket: ws://ec2-13-126-228-85.ap-south-1.compute.amazonaws.com:3002"
            echo ""
            
            # Final cleanup of unused images and containers
            echo "🧹 Final cleanup..."
            docker container prune -f || true
            docker image prune -f || true
